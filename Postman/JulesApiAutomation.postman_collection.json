{
	"info": {
		"_postman_id": "73e5601a-1540-4495-a5a0-2f8fb2dcbc42",
		"name": "JulesApiAutomation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6226420",
		"_collection_link": "https://automation-team-123456.postman.co/workspace/API-Automation~168b1fad-dcc1-49dc-9e7f-4bedf3612d56/collection/6226420-73e5601a-1540-4495-a5a0-2f8fb2dcbc42?action=share&source=collection_link&creator=6226420"
	},
	"item": [
		{
			"name": "JulesLoginTestcases",
			"item": [
				{
					"name": "Login - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"login\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"token\": { \"type\": \"string\" },",
									"        \"defaultPage\": { \"type\": \"string\" },",
									"        \"shouldUseAwsServer\": { \"type\": \"boolean\" }",
									"      },",
									"      \"required\": [\"token\", \"defaultPage\", \"shouldUseAwsServer\"]",
									"    }",
									"  }",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login response has token & set the token as a collection variable\", function () {",
									"    const res = pm.response.json();",
									"    console.log(res);",
									"    pm.expect(res.data.login.token).to.be.a('string');",
									"    pm.collectionVariables.set(\"auth_token\", res.data.login.token);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation Login($email: String!, $password: String!) {\r\n  login(email: $email, password: $password) {\r\n    token\r\n    defaultPage\r\n    shouldUseAwsServer\r\n  }\r\n}",
								"variables": "{  \r\n \"email\": \"{{email}}\",\r\n   \"password\": \"{{password}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  type: \"object\",",
									"  properties: {",
									"    errors: {",
									"      type: \"array\",",
									"      items: {",
									"        type: \"object\",",
									"        properties: {",
									"          message: { type: \"string\" },",
									"          locations: {",
									"            type: \"array\",",
									"            items: {",
									"              type: \"object\",",
									"              properties: {",
									"                line: { type: \"integer\" },",
									"                column: { type: \"integer\" }",
									"              },",
									"              required: [\"line\", \"column\"]",
									"            }",
									"          },",
									"          path: {",
									"            type: \"array\",",
									"            items: { type: \"string\" }",
									"          },",
									"          extensions: {",
									"            type: \"object\",",
									"            properties: {",
									"              code: { type: \"string\" },",
									"              stacktrace: {",
									"                type: \"array\",",
									"                items: { type: \"string\" }",
									"              }",
									"            },",
									"            required: [\"code\", \"stacktrace\"]",
									"          }",
									"        },",
									"        required: [\"message\", \"locations\", \"path\", \"extensions\"]",
									"      }",
									"    },",
									"    data: {",
									"      type: \"object\",",
									"      properties: {",
									"        login: { type: [\"null\"] }",
									"      },",
									"      required: [\"login\"]",
									"    }",
									"  },",
									"  required: [\"errors\", \"data\"]",
									"};",
									"",
									"pm.test(\"Schema is valid\", function () {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Should return 401 or error - WRONG_CREDENTIALS\", function () {",
									"    const res = pm.response.json();",
									"    console.log(res);",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
									"    pm.expect(res.errors[0].message).to.include(\"WRONG_CREDENTIALS\");",
									"});",
									"",
									"pm.test(\"Login data is null on failure\", function () {",
									"    const json = pm.response.json();",
									"    pm.expect(json.data.login).to.be.null;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation Login($email: String!, $password: String!) {\r\n  login(email: $email, password: $password) {\r\n    token\r\n    defaultPage\r\n    shouldUseAwsServer\r\n  }\r\n}",
								"variables": "{  \r\n   \"email\": \"qa123@julesai.com\",\r\n   \"password\": \"Jay@21320012222\"\r\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Missing Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  type: \"object\",",
									"  properties: {",
									"    errors: {",
									"      type: \"array\",",
									"      items: {",
									"        type: \"object\",",
									"        properties: {",
									"          message: { type: \"string\" },",
									"          locations: {",
									"            type: \"array\",",
									"            items: {",
									"              type: \"object\",",
									"              properties: {",
									"                line: { type: \"integer\" },",
									"                column: { type: \"integer\" }",
									"              },",
									"              required: [\"line\", \"column\"]",
									"            }",
									"          },",
									"          path: {",
									"            type: \"array\",",
									"            items: { type: \"string\" }",
									"          },",
									"          extensions: {",
									"            type: \"object\",",
									"            properties: {",
									"              code: { type: \"string\" },",
									"              stacktrace: {",
									"                type: \"array\",",
									"                items: { type: \"string\" }",
									"              }",
									"            },",
									"            required: [\"code\", \"stacktrace\"]",
									"          }",
									"        },",
									"        required: [\"message\", \"locations\", \"path\", \"extensions\"]",
									"      }",
									"    },",
									"    data: {",
									"      type: \"object\",",
									"      properties: {",
									"        login: { type: [\"null\"] }",
									"      },",
									"      required: [\"login\"]",
									"    }",
									"  },",
									"  required: [\"errors\", \"data\"]",
									"};",
									"",
									"pm.test(\"Schema is valid for response\", function () {",
									"  pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Should return validation error - data and hash arguments required\", function () {",
									"    const res = pm.response.json();",
									"    console.log(res);",
									"    pm.expect(res.errors).to.be.an(\"array\");",
									"    pm.expect(res.errors[0].message).to.equal(\"data and hash arguments required\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Error code is INTERNAL_SERVER_ERROR\", function () {",
									"    const json = pm.response.json();",
									"    pm.expect(json.errors[0].extensions.code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									"",
									"pm.test(\"Login data should be null\", function () {",
									"    const json = pm.response.json();",
									"    pm.expect(json.data.login).to.eql(null);",
									"});",
									"",
									"pm.test(\"Stack trace exists\", function () {",
									"    const json = pm.response.json();",
									"    const trace = json.errors[0].extensions.stacktrace;",
									"    pm.expect(trace).to.be.an('array');",
									"    pm.expect(trace.length).to.be.greaterThan(0);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation Login($email: String!, $password: String!) {\r\n  login(email: $email, password: $password) {\r\n    token\r\n    defaultPage\r\n    shouldUseAwsServer\r\n  }\r\n}",
								"variables": "{  \r\n   \"email\": \"\",\r\n   \"password\": \"\"\r\n}"
							}
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://demo.api.julesai.com"
		},
		{
			"key": "email",
			"value": "qa@julesai.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "Jay@2132001",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": ""
		},
		{
			"key": "invalid_email",
			"value": "",
			"type": "string"
		},
		{
			"key": "invalid_password",
			"value": "",
			"type": "string"
		}
	]
}